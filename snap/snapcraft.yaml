%YAML 1.1
---
# Snapcraft Recipe for ASCIIQuarium
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be
# stripped before contributing the recipe to the upstream

# ASCIIQuarium, asciiquarium, asciiquarium-launch
# are placeholders text meant to be replaced by appropriate content
name: asciiquarium
title: ASCIIQuarium (UNOFFICIAL)
summary: Asciiquarium is an aquarium/sea animation in ASCII art
description: |
  This program displays an aquarium/sea animation using ASCII art

  **Usage**

  There are no command-line arguments.

  While running:

  * q:   quit
  * r:   redraw (will recreate all entities)
  * p:   toggle pause

  **Contributors**

  Pretty much all of the ASCII art was done by Joan Stark:
  http://www.geocities.com/SoHo/7373/

  Anything that she didn't do, I don't have a source for.

  **Snap maintaner's note**

  This is NOT an official distribution of ASCIIquarium, for support
  on using this snap please refer to the snap's own issue tracker:

      Issues Â· brlin-tw/asciiquarium-snap
      https://github.com/brlin-tw/asciiquarium-snap/issues

# The path of icon to represent the snap, relative to the source tree
# directory
# Only PNG or SVG image is supported, dimension must be greater than
# 256x256px
icon: snap/gui/asciiquarium.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as
# described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: GPL-2.0-or-later

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version
# string being accidentally interpreted as a YAML non-string
# (like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: '1.1'
adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
  - command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked
# applications
base: core18
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not
# currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only
# `stable` grade snaps can be promoted to `candidate` and `stable`
# channels
grade: stable

# Run `snapcraft help sources` for supported keywords on pulling a
# part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's
# lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
      - -bin/README.*

  main:
    source: https://robobunny.com/projects/asciiquarium/asciiquarium_1.1.tar.gz
    override-pull: |
      set -o nounset

      snapcraftctl pull

      snap_recipe_revision="$(
        git -C "${SNAPCRAFT_PROJECT_DIR}" describe \
          --always \
          --abbrev=4
      )"
      snapcraftctl set-version \
        "1.1-snap${snap_recipe_revision}"
    plugin: dump
    build-packages:
      - git
    organize:
      asciiquarium: bin/
    stage:
      - bin/*
      - gpl.txt
    override-prime: |
      set -o nounset

      snapcraftctl prime
      chmod +x "${SNAPCRAFT_PRIME}/bin/asciiquarium"

  perl-term-animation:
    plugin: nil
    build-packages:
      - libcurses-perl
      - make
      - perl
    stage-packages:
      - libcurses-perl
      # Albeit being suggested by Snapcraft, these do not prevent
      # program from running
      # - libgdbm-compat4
      # - libgdbm5
    override-build: |
      cpan Term::Animation
    build-environment:
      - PERL_MM_OPT: 'INSTALL_BASE=${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}'
      - PERL_MB_OPT: '--install_base ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}'
    organize:
      usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/lib/perl5: usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/perl/5
    prime:
      - usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/perl*/**/*.so
      - usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/perl*/**/*.pm
      - usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/perl*/**/*.pl
      - usr/share/doc/libcurses-perl/copyright

  perl-runtime:
    plugin: nil
    stage-packages:
      - perl-base

  # The debian-multiarch-triplet-provider-launch launcher: Enable
  # DEBIAN_MULTIARCH_TRIPLET-like environment variable in the snap
  # runtime
  # https://forum.snapcraft.io/t/the-debian-multiarch-triplet-provider-launch-launcher-enable-debian-multiarch-triplet-like-environment-variable-in-the-snap-runtime/11738
  debian-multiarch-triplet-provider-launch:
    source: https://github.com/brlin-tw/debian-multiarch-triplet-provider-launch.git
    source-tag: v1.0.2
    plugin: dump
    stage:
      - bin/debian-multiarch-triplet-provider-launch

  # The perl-launch launcher: Fix Perl applications in the snap runtime
  # https://forum.snapcraft.io/t/the-perl-launch-launcher-fix-perl-applications-in-the-snap-runtime/11736
  perl-launch:
    source: https://github.com/brlin-tw/perl-launch.git
    source-tag: v1.0.1
    plugin: dump
    stage:
      - bin/perl-launch

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly
# run with `_snap_name_` or `snap run _snap_name_` commands, otherwise
# it can only be run via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  asciiquarium:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime`
    # directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the
    # `command` keyword starts a YAML folded style block scalar, refer
    # the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/asciiquarium

    # The commands that are run, in order, before running the one
    # specified by the `command` key
    command-chain:
      - bin/debian-multiarch-triplet-provider-launch
      - bin/perl-launch
      - bin/asciiquarium-launch

    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
